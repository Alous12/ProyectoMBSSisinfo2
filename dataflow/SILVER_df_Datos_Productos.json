{
	"name": "SILVER_df_Datos_Productos",
	"properties": {
		"folder": {
			"name": "SILVER"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "BRONZE_sql_Productos_MBS",
						"type": "DatasetReference"
					},
					"name": "source2"
				},
				{
					"dataset": {
						"referenceName": "BRONZE_sql_Productos_Cat_MBS",
						"type": "DatasetReference"
					},
					"name": "source3"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SILVER_sql_Datos_Productos",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "LimpiarProductos"
				},
				{
					"name": "LimpiarProductosCat"
				},
				{
					"name": "join1"
				},
				{
					"name": "mantenimiento"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          prd_id as integer,",
				"          prd_key as string,",
				"          prd_nm as string,",
				"          prd_cost as decimal(18,0),",
				"          prd_line as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source2",
				"source(output(",
				"          ID as string,",
				"          CAT as string,",
				"          SUBCAT as string,",
				"          MAINTENANCE as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source3",
				"source2 derive(prd_key = replace(prd_key, '-', '')) ~> LimpiarProductos",
				"source3 derive(ID = replace(ID, '_', '')) ~> LimpiarProductosCat",
				"LimpiarProductos, LimpiarProductosCat join(startsWith(prd_key, ID),",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'off')~> join1",
				"join1 derive(MAINTENANCE = iif(MAINTENANCE == 'Yes', 1, 0)\r",
				",",
				"          prd_cost = iif(isNull(prd_cost), 0, toInteger(prd_cost))) ~> mantenimiento",
				"mantenimiento select(mapColumn(",
				"          prd_id,",
				"          prd_key,",
				"          prd_nm,",
				"          prd_cost,",
				"          prd_line,",
				"          CAT,",
				"          SUBCAT,",
				"          MAINTENANCE",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          prd_id as integer,",
				"          prd_key as string,",
				"          prd_nombre as string,",
				"          prd_cost as decimal(18,0),",
				"          linea as string,",
				"          category as string,",
				"          subcategory as string,",
				"          maintenance as boolean",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          prd_id,",
				"          prd_key,",
				"          prd_nombre = prd_nm,",
				"          prd_cost,",
				"          linea = prd_line,",
				"          category = CAT,",
				"          subcategory = SUBCAT,",
				"          maintenance = MAINTENANCE",
				"     )) ~> sink1"
			]
		}
	}
}